Imp points:

Array list initialize with elements:
ArrayList<Integer> numbers = new ArrayList<>(Arrays.asList(1, 2, 3, 4, 5, 6));

initialize array:
int[] i = {1,2,3};

Array length -> .length
String length -> .length()

Array for => for(Integer i: num)
String for => for(int i=0; i<s.length(); i++) (or) for(char c : s.toCharArray())

Use Greedy approach (linear time) to find sum, max or min in an array. It will always have (current element, local maximum and global maximum).

:: operator is shorthand for lambdas calling a specific method â€“ by name. The target reference is placed before the delimiter :: and the name of the method is provided after it.
Ex: System.out::print; Arrays.sort(words, Comparator.comparingInt(String::length));

Lambda:        array.forEach(number -> System.out.println(number));
Double colon:  array.forEach(System.out::println);

Empty list: Collections.emptyList()
Reverse: Collections.reverseOrder()
String to int: Integer.parseInt("42")
int to String: String.valueOf(3)
Char to String: String.valueOf('c')
String to char: s.charAt(0)

ASCII:
0 - 9 :    48-57
A - Z :    65-90
a - z :    97-122

COLLECTIONS:
Priority Queue - implemented using min/max heap
               - min heap has root as least element
               - default is min heap - peek/poll gives least element - so default ordering is lest to highest element
               - insert, delete: O(log n) ; get - O(1)
AVL trees - self balancing binary tree - differences between heights of left and right subtrees for every node is less than or equal to 1
          - all operations O(log n)

Additional stuff to see:
map functions - iterate, key, val, keys, values
Collections methods
Big O